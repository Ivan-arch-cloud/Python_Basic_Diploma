import logging
from telebot.types import Message, CallbackQuery
from restaurant_bot.loader import bot
from restaurant_bot.states.user_information import UsersStates
from restaurant_bot.database.rest_db_for_users import (
    add_to_cart,
    view_cart,
    clear_cart,
    get_menu_items,
)
from restaurant_bot.keyboards.reply.reply import get_cart_keyboard
from restaurant_bot.keyboards.inline.inline import get_items_keyboard, get_back_button_inline

logger = logging.getLogger(__name__)

# user_name = State()
# check_name = State()
# shopping_cart = State()
# add_to_cart = State()
# remove_from_cart = State()
# total_amount = State()
# payment = State()
# address = State()
# phone_number = State()


@bot.message_handler(state=UsersStates.user_name)
def name_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    bot.set_state(message.from_user.id, UsersStates.check_name, message.chat.id)


@bot.message_handler(state=UsersStates.check_name)
def check_name(message: Message) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏."""
    if message.text.isalpha():
        bot.send_message(
            message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ, {message.text}! üòä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑.",
        )
        bot.set_state(message.from_user.id, UsersStates.shopping_cart, message.chat.id)
    else:
        bot.send_message(
            message.chat.id,
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.",
        )


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
@bot.message_handler(state=UsersStates.shopping_cart, commands=["menu"])
def show_menu(message: Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é."""
    bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_items_keyboard()
    )


@bot.callback_query_handler(state=UsersStates.add_to_cart, func=lambda call: call.data.startswith("item_"))
def handle_item_selection(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞."""
    item_id = int(call.data.split("item_")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –±–ª—é–¥–∞
    try:
        add_to_cart(call.from_user.id, item_id)
        bot.answer_callback_query(call.id, "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É! üõí")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@bot.message_handler(state=UsersStates.shopping_cart, commands=["cart"])
def view_user_cart(message: Message) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã."""
    try:
        cart_items = view_cart(message.from_user.id)
        if cart_items:
            cart_text = "\n".join(
                [f"{item['name']} (x{item['quantity']}): {item['total_price']}‚ÇΩ" for item in cart_items]
            )
            bot.send_message(
                message.chat.id,
                f"–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_text}",
                reply_markup=get_cart_keyboard(),
            )
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –±–ª—é–¥–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@bot.message_handler(state=UsersStates.remove_from_cart, commands=["clear_cart"])
def clear_user_cart(message: Message) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if clear_cart(message.from_user.id):
            bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! üóëÔ∏è")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@bot.message_handler(state=UsersStates.total_amount, commands=["checkout"])
def checkout_handler(message: Message) -> None:
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    bot.set_state(message.from_user.id, UsersStates.address, message.chat.id)


@bot.message_handler(state=UsersStates.address)
def address_handler(message: Message) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    bot.set_state(message.from_user.id, UsersStates.phone_number, message.chat.id)


@bot.message_handler(state=UsersStates.phone_number)
def phone_number_handler(message: Message) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. üõµ",
    )
    bot.set_state(message.from_user.id, UsersStates.user_name, message.chat.id)
