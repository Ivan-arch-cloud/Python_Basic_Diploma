import logging
import hashlib
from restaurant_bot.keyboards.reply.reply import after_role_keyboard, get_back_button
from restaurant_bot.database.db import fetch_all
from restaurant_bot.states.user_information import AdminStates
from telebot import TeleBot
from telebot.types import Message


logger = logging.getLogger(__name__)


def admin_password_handler(bot: TeleBot):

    def hash_password(password: str) -> str:
        return hashlib.sha256(password.encode()).hexdigest()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
    def is_password_correct(entered_password: str) -> bool:
        hashed_password = hash_password(entered_password)
        query = "SELECT password FROM admin WHERE id = 1"
        result = fetch_all(query)
        if result:
            stored_password = result[0][0]
            return hashed_password == stored_password
        return False


    @bot.message_handler(state=AdminStates.admin_password_check)
    def verify_password_handler(message: Message) -> None:
        entered_password = message.text.strip()

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if 'failed_attempts' not in data:
                data['failed_attempts'] = 0

            if is_password_correct(entered_password):
                bot.send_message(message.chat.id,
                                 "–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω! üòä",
                                 reply_markup=after_role_keyboard())  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                logger.info(f"–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
                bot.delete_state(message.from_user.id, message.chat.id)
                data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            else:
                data['failed_attempts'] += 1
                bot.send_message(
                    message.chat.id,
                    f"–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü–æ–ø—ã—Ç–æ–∫: {data['failed_attempts']}.",
                    reply_markup=get_back_button()  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
                )
                logger.warning(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. "
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {data['failed_attempts']}."
                )

                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                if data['failed_attempts'] >= 3:
                    bot.send_message(
                        message.chat.id,
                        "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    bot.delete_state(message.from_user.id, message.chat.id)
                    data.clear()