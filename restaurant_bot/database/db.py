import sqlite3
import logging
from restaurant_bot.config_data.config import DB_PATH

logger = logging.getLogger(__name__)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü."""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS menu (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    category TEXT NOT NULL,
                    callback_data TEXT NOT NULL UNIQUE
                )
            ''')

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS items (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    category_callback TEXT NOT NULL,
                    name TEXT NOT NULL,
                    callback_data TEXT NOT NULL UNIQUE,
                    price REAL NOT NULL CHECK(price >= 0) 
                )
            ''')

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL, 
                    order_details TEXT NOT NULL, 
                    order_date DATETIME DEFAULT CURRENT_TIMESTAMP 
                )
            ''')

            cursor.execute('CREATE UNIQUE INDEX IF NOT EXISTS idx_menu_callback_data ON menu (callback_data)')
            cursor.execute('CREATE UNIQUE INDEX IF NOT EXISTS idx_items_callback_data ON items (callback_data)')
            cursor.execute('CREATE UNIQUE INDEX IF NOT EXISTS idx_orders_user_id ON orders (user_id)')

            categories = [
                ('–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—èü•®', 'bakery'),
                ('–ó–∞–∫—É—Å–∫–∏üßÄ', 'snacks'),
                ('–°–∞–ª–∞—Ç—ãü•ó', 'salads'),
                ('–°—É–ø—ãüç≤', 'soups'),
                ('–ì–∞—Ä–Ω–∏—Äüçö', 'side_dishes'),
                ('–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞ü•©', 'hot_dishes'),
                ('–î–µ—Å–µ—Ä—ÇüßÅ', 'desserts'),
                ('–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏üçπ', 'cold_drinks'),
                ('–ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏üçµ', 'hot_drinks'),
                ('–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ü•Ç', 'alcoholic_drinks')
            ]

            cursor.executemany('INSERT OR IGNORE INTO menu (name, callback_data) VALUES (?, ?)', categories)

            items = [
                ('bakery', '–•–ª–µ–±–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∫–∞', 'bread_cart', 15),
                ('snacks', '–ó–µ–ª–µ–Ω—å', 'greens', 30),
                ('snacks', '–°—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞', 'cheese_plate', 200),
                ('snacks', '–ú—è—Å–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞', 'meat_plate', 250),
                ('salads', '–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç', 'greek_salad', 150),
                ('salads', '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π —Å–∞–ª–∞—Ç', 'bulgarian_salad', 140),
                ('salads', '–ú–æ—Ü–∞—Ä–µ–ª–ª–∞ –∫–∞–ø—Ä–µ–∑–µ', 'mozzarella_caprese', 180),
                ('soups', '–¢–æ–º–∞—Ç–Ω—ã–π –∫—Ä–µ–º-—Å—É–ø', 'tomato_soup', 150),
                ('soups', '–°—É–ø —Å –∫—É—Ä–∏—Ü–µ–π', 'chicken_soup', 140),
                ('soups', '–°–æ–ª—è–Ω–∫–∞', 'solyanka', 160),
                ('side_dishes', '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏', 'french_fries', 70),
                ('side_dishes', '–†–∏—Å', 'rice', 60),
                ('hot_dishes', '–®–∞—à–ª—ã–∫ –∞—Å—Å–æ—Ä—Ç–∏', 'barbeque', 300),
                ('hot_dishes', '–ì–æ–≤—è–∂–∏–π —Å—Ç–µ–π–∫', 'beef_steak', 400),
                ('hot_dishes', '–ö—É—Ä–∏—Ü–∞ –≤ –¥—É—Ö–æ–≤–∫–µ', 'baked_chicken', 280),
                ('desserts', '–ë—Ä–∞—É–Ω–∏', 'brownie', 120),
                ('desserts', '–ß–∏–∑–∫–µ–π–∫', 'cheesecake', 150),
                ('desserts', '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', 'ice_cream', 90),
                ('cold_drinks', '–í–æ–¥–∞', 'water', 50),
                ('cold_drinks', '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞', 'mineral_water', 60),
                ('cold_drinks', '–ö–æ–∫–∞-–ö–æ–ª–∞', 'coke', 80),
                ('cold_drinks', '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ–∫', 'juice', 100),
                ('hot_drinks', '–ß–∞–π', 'tea', 40),
                ('hot_drinks', '–ö–æ—Ñ–µ', 'coffee', 90),
                ('hot_drinks', '–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥', 'hot_chocolate', 120),
                ('alcoholic_drinks', '–í–æ–¥–∫–∞', 'vodka', 210),
                ('alcoholic_drinks', '–í–∏–Ω–æ', 'wine', 300),
                ('alcoholic_drinks', '–í–∏—Å–∫–∏', 'whisky', 450)
            ]

            cursor.executemany(
                'INSERT OR IGNORE INTO items '
                '(category_callback, name, callback_data, price) VALUES (?, ?, ?, ?)', items
            )

            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def db_connection(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    def wrapper(*args, **kwargs):
        try:
            with sqlite3.connect(DB_PATH) as conn:
                kwargs['conn'] = conn
                return func(*args, **kwargs)
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    return wrapper


@db_connection
def execute_query(query, params=(), conn=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞."""
    try:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise


@db_connection
def fetch_all(query, params=(), conn=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SQL-–∑–∞–ø—Ä–æ—Å–∞."""
    try:
        cursor = conn.cursor()
        cursor.execute(query, params)
        return cursor.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []
